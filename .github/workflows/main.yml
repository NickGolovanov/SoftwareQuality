name: DTAP Pipeline for Java

on:
  push:
    branches:
      - develop
      - test
      - acceptance
      - main

jobs:
  # Development Phase (Unit Tests)
  development:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Maven clean test
        run: mvn clean test

  # Testing Phase (Regression Tests)
  testing:
    if: github.ref == 'refs/heads/develop'
    needs: development
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run integration tests
        run: mvn verify

  # Acceptance Phase (Staging Deployment)
  acceptance:
    if: github.ref == 'refs/heads/develop'
    needs: testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensures full history for merging

      - name: Merge develop to main
        uses: devmasx/merge-branch@v1.4.0
        with:
          type: now
          from_branch: develop
          target_branch: main
          github_token: ${{ secrets.VICTOR_TOKEN }}

#      - name: Push changes to main
#        run: git push origin main
    

      # - name: Set up JDK 17
      #   uses: actions/setup-java@v3
      #   with:
      #     distribution: 'temurin'
      #     java-version: '17'

      # - name: Build with Maven
      #   run: mvn clean package -DskipTests

      # - name: Deploy to Staging (UAT)
      #   env:
      #     STAGING_SERVER: ${{ secrets.STAGING_SERVER }}
      #     STAGING_USER: ${{ secrets.STAGING_USER }}
      #     STAGING_PASS: ${{ secrets.STAGING_PASS }}
      #   run: |
      #     # Install sshpass for password-based SSH
      #     sudo apt-get update
      #     sudo apt-get install -y sshpass
      
      #     # Disable host key checking
      #     mkdir -p ~/.ssh
      #     echo "Host *" >> ~/.ssh/config
      #     echo "    StrictHostKeyChecking no" >> ~/.ssh/config
      #     echo "    UserKnownHostsFile /dev/null" >> ~/.ssh/config
      
      #     # Find the specific JAR file, excluding "original" jars
      #     JAR_FILE=$(ls target/*-SNAPSHOT.jar | grep -v 'original' | head -n 1)
      
      #     # Check if the file was found
      #     if [ -z "$JAR_FILE" ]; then
      #     echo "Error: No JAR file found for deployment."
      #     exit 1
      #     fi
      
      #     # Deploy using sshpass
      #     sshpass -p "$STAGING_PASS" scp "$JAR_FILE" $STAGING_USER@$STAGING_SERVER:/var/www/staging/
      #     sshpass -p "$STAGING_PASS" ssh $STAGING_USER@$STAGING_SERVER "java -jar /var/www/staging/$(basename $JAR_FILE)"

  # Production Phase (Push Docker Image)
#  production:
#    if: github.ref == 'refs/heads/main'
#    needs: acceptance
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'
#          java-version: '17'
#
#      # Build Docker Image
#      - name: Build Docker Image
#        run: |
#          docker build -t ${{ secrets.DOCKER_USERNAME }}/myproject-name:${{ github.sha }} .
#
#      # Log in to Docker Hub
#      - name: Log in to Docker Hub
#        run: |
#          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
#
#      # Push Docker Image to Docker Hub
#      - name: Push Docker Image to Docker Hub
#        run: |
#          docker push ${{ secrets.DOCKER_USERNAME }}/myproject-name:${{ github.sha }}
#
